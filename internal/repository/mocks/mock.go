// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "film-library/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), ctx, user)
}

// VerifyUser mocks base method.
func (m *MockAuthorization) VerifyUser(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockAuthorizationMockRecorder) VerifyUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockAuthorization)(nil).VerifyUser), ctx, username)
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// ActorExistsById mocks base method.
func (m *MockActor) ActorExistsById(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorExistsById", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorExistsById indicates an expected call of ActorExistsById.
func (mr *MockActorMockRecorder) ActorExistsById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorExistsById", reflect.TypeOf((*MockActor)(nil).ActorExistsById), ctx, id)
}

// ActorExistsByName mocks base method.
func (m *MockActor) ActorExistsByName(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorExistsByName", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorExistsByName indicates an expected call of ActorExistsByName.
func (mr *MockActorMockRecorder) ActorExistsByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorExistsByName", reflect.TypeOf((*MockActor)(nil).ActorExistsByName), ctx, name)
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(ctx context.Context, actor *model.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", ctx, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), ctx, actor)
}

// DeleteActor mocks base method.
func (m *MockActor) DeleteActor(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorMockRecorder) DeleteActor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActor)(nil).DeleteActor), ctx, id)
}

// UpdateActor mocks base method.
func (m *MockActor) UpdateActor(ctx context.Context, actor *model.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorMockRecorder) UpdateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActor)(nil).UpdateActor), ctx, actor)
}

// MockMovie is a mock of Movie interface.
type MockMovie struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMockRecorder
}

// MockMovieMockRecorder is the mock recorder for MockMovie.
type MockMovieMockRecorder struct {
	mock *MockMovie
}

// NewMockMovie creates a new mock instance.
func NewMockMovie(ctrl *gomock.Controller) *MockMovie {
	mock := &MockMovie{ctrl: ctrl}
	mock.recorder = &MockMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovie) EXPECT() *MockMovieMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockMovie) CreateFilm(ctx context.Context, film *model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockMovieMockRecorder) CreateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockMovie)(nil).CreateFilm), ctx, film)
}

// DeleteFilm mocks base method.
func (m *MockMovie) DeleteFilm(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockMovieMockRecorder) DeleteFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockMovie)(nil).DeleteFilm), ctx, id)
}

// GetAllFilms mocks base method.
func (m *MockMovie) GetAllFilms(ctx context.Context, sortBy string) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms", ctx, sortBy)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockMovieMockRecorder) GetAllFilms(ctx, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockMovie)(nil).GetAllFilms), ctx, sortBy)
}

// MovieExistsById mocks base method.
func (m *MockMovie) MovieExistsById(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieExistsById", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieExistsById indicates an expected call of MovieExistsById.
func (mr *MockMovieMockRecorder) MovieExistsById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieExistsById", reflect.TypeOf((*MockMovie)(nil).MovieExistsById), ctx, id)
}

// MovieExistsByName mocks base method.
func (m *MockMovie) MovieExistsByName(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieExistsByName", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieExistsByName indicates an expected call of MovieExistsByName.
func (mr *MockMovieMockRecorder) MovieExistsByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieExistsByName", reflect.TypeOf((*MockMovie)(nil).MovieExistsByName), ctx, name)
}

// SearchFilm mocks base method.
func (m *MockMovie) SearchFilm(ctx context.Context, actor, film string) (model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, actor, film)
	ret0, _ := ret[0].(model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockMovieMockRecorder) SearchFilm(ctx, actor, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockMovie)(nil).SearchFilm), ctx, actor, film)
}

// UpdateFilm mocks base method.
func (m *MockMovie) UpdateFilm(ctx context.Context, film *model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockMovieMockRecorder) UpdateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockMovie)(nil).UpdateFilm), ctx, film)
}

// MockActorMovie is a mock of ActorMovie interface.
type MockActorMovie struct {
	ctrl     *gomock.Controller
	recorder *MockActorMovieMockRecorder
}

// MockActorMovieMockRecorder is the mock recorder for MockActorMovie.
type MockActorMovieMockRecorder struct {
	mock *MockActorMovie
}

// NewMockActorMovie creates a new mock instance.
func NewMockActorMovie(ctrl *gomock.Controller) *MockActorMovie {
	mock := &MockActorMovie{ctrl: ctrl}
	mock.recorder = &MockActorMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorMovie) EXPECT() *MockActorMovieMockRecorder {
	return m.recorder
}

// GetActorsWithFilms mocks base method.
func (m *MockActorMovie) GetActorsWithFilms(ctx context.Context) (map[int]model.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsWithFilms", ctx)
	ret0, _ := ret[0].(map[int]model.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsWithFilms indicates an expected call of GetActorsWithFilms.
func (mr *MockActorMovieMockRecorder) GetActorsWithFilms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsWithFilms", reflect.TypeOf((*MockActorMovie)(nil).GetActorsWithFilms), ctx)
}
