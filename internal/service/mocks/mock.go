// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "film-library/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(ctx context.Context, user model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), ctx, user)
}

// VerifyToken mocks base method.
func (m *MockAuthorization) VerifyToken(tokenString string) (*model.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*model.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthorizationMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthorization)(nil).VerifyToken), tokenString)
}

// VerifyUser mocks base method.
func (m *MockAuthorization) VerifyUser(ctx context.Context, username, password string) (string, *model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockAuthorizationMockRecorder) VerifyUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockAuthorization)(nil).VerifyUser), ctx, username, password)
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActor) AddActor(ctx context.Context, actor model.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorMockRecorder) AddActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActor)(nil).AddActor), ctx, actor)
}

// DeleteActor mocks base method.
func (m *MockActor) DeleteActor(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorMockRecorder) DeleteActor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActor)(nil).DeleteActor), ctx, id)
}

// UpdateActor mocks base method.
func (m *MockActor) UpdateActor(ctx context.Context, actor model.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorMockRecorder) UpdateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActor)(nil).UpdateActor), ctx, actor)
}

// MockMovie is a mock of Movie interface.
type MockMovie struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMockRecorder
}

// MockMovieMockRecorder is the mock recorder for MockMovie.
type MockMovieMockRecorder struct {
	mock *MockMovie
}

// NewMockMovie creates a new mock instance.
func NewMockMovie(ctrl *gomock.Controller) *MockMovie {
	mock := &MockMovie{ctrl: ctrl}
	mock.recorder = &MockMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovie) EXPECT() *MockMovieMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockMovie) AddMovie(ctx context.Context, film model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockMovieMockRecorder) AddMovie(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockMovie)(nil).AddMovie), ctx, film)
}

// DeleteMovie mocks base method.
func (m *MockMovie) DeleteMovie(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieMockRecorder) DeleteMovie(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovie)(nil).DeleteMovie), ctx, id)
}

// GetFilms mocks base method.
func (m *MockMovie) GetFilms(ctx context.Context, sortBy string) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, sortBy)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockMovieMockRecorder) GetFilms(ctx, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockMovie)(nil).GetFilms), ctx, sortBy)
}

// SearchFilm mocks base method.
func (m *MockMovie) SearchFilm(ctx context.Context, actor, film string) (model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, actor, film)
	ret0, _ := ret[0].(model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockMovieMockRecorder) SearchFilm(ctx, actor, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockMovie)(nil).SearchFilm), ctx, actor, film)
}

// UpdateMovie mocks base method.
func (m *MockMovie) UpdateMovie(ctx context.Context, film model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieMockRecorder) UpdateMovie(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovie)(nil).UpdateMovie), ctx, film)
}

// MockActorMovie is a mock of ActorMovie interface.
type MockActorMovie struct {
	ctrl     *gomock.Controller
	recorder *MockActorMovieMockRecorder
}

// MockActorMovieMockRecorder is the mock recorder for MockActorMovie.
type MockActorMovieMockRecorder struct {
	mock *MockActorMovie
}

// NewMockActorMovie creates a new mock instance.
func NewMockActorMovie(ctrl *gomock.Controller) *MockActorMovie {
	mock := &MockActorMovie{ctrl: ctrl}
	mock.recorder = &MockActorMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorMovie) EXPECT() *MockActorMovieMockRecorder {
	return m.recorder
}

// GetAllActorWithFilms mocks base method.
func (m *MockActorMovie) GetAllActorWithFilms(ctx context.Context) (map[int]model.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActorWithFilms", ctx)
	ret0, _ := ret[0].(map[int]model.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActorWithFilms indicates an expected call of GetAllActorWithFilms.
func (mr *MockActorMovieMockRecorder) GetAllActorWithFilms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActorWithFilms", reflect.TypeOf((*MockActorMovie)(nil).GetAllActorWithFilms), ctx)
}
